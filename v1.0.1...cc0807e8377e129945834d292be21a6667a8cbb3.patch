From d5d6cb1b012f050f9ae986119010c3bca833b5d1 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Tue, 5 Mar 2019 16:15:17 -0600
Subject: [PATCH 1/8] Bump version

---
 CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e7d46c8d..402e80f3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -30,8 +30,8 @@ project(MERCURY C)
 # Version information 
 #------------------------------------------------------------------------------
 set(MERCURY_VERSION_MAJOR "1")
-set(MERCURY_VERSION_MINOR "0")
-set(MERCURY_VERSION_PATCH "1")
+set(MERCURY_VERSION_MINOR "1")
+set(MERCURY_VERSION_PATCH "0")
 set(MERCURY_PACKAGE "mercury")
 set(MERCURY_PACKAGE_NAME "MERCURY")
 set(MERCURY_PACKAGE_VERSION "${MERCURY_VERSION_MAJOR}.${MERCURY_VERSION_MINOR}.${MERCURY_VERSION_PATCH}")

From 9f9dd80164a2b14b184f2b373efeb50a5fc80dc5 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Fri, 8 Mar 2019 11:26:14 -0600
Subject: [PATCH 2/8] HG Core: fix missing static inline in mercury_core.h

---
 src/mercury_core.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/mercury_core.h b/src/mercury_core.h
index ebb18e96..072a865a 100644
--- a/src/mercury_core.h
+++ b/src/mercury_core.h
@@ -1367,7 +1367,7 @@ HG_Core_get_input(hg_core_handle_t handle, void **in_buf,
 }
 
 /*---------------------------------------------------------------------------*/
-hg_return_t
+static HG_INLINE hg_return_t
 HG_Core_get_output(hg_core_handle_t handle, void **out_buf,
     hg_size_t *out_buf_size)
 {

From 65f62bfa3ca76b676fd970bfa4d9b78e4d73aab7 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Sun, 31 Mar 2019 19:31:25 -0500
Subject: [PATCH 3/8] Update travis build for OFI 1.7.1rc2 and CMake 3.14

---
 Testing/script/travis_build.sh | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/Testing/script/travis_build.sh b/Testing/script/travis_build.sh
index f13e18f0..9b21ece3 100755
--- a/Testing/script/travis_build.sh
+++ b/Testing/script/travis_build.sh
@@ -1,10 +1,10 @@
 #!/bin/bash
 
-CMAKE_VERSION_MAJOR=3.13
-CMAKE_VERSION_MINOR=2
+CMAKE_VERSION_MAJOR=3.14
+CMAKE_VERSION_MINOR=1
 MPI_VERSION=3.3
 CCI_VERSION=2.1
-OFI_VERSION=1.7.0
+OFI_VERSION=1.7.1rc2
 PREFIX=$HOME/install
 
 set -e

From a0f13f3e47e543ecc2fbd71d2bb84b620e22daf3 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Tue, 7 May 2019 08:43:31 -0400
Subject: [PATCH 4/8] Update travis to use libfabric v1.7.1

---
 Testing/script/travis_build.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Testing/script/travis_build.sh b/Testing/script/travis_build.sh
index 9b21ece3..d17cde59 100755
--- a/Testing/script/travis_build.sh
+++ b/Testing/script/travis_build.sh
@@ -1,10 +1,10 @@
 #!/bin/bash
 
 CMAKE_VERSION_MAJOR=3.14
-CMAKE_VERSION_MINOR=1
+CMAKE_VERSION_MINOR=3
 MPI_VERSION=3.3
 CCI_VERSION=2.1
-OFI_VERSION=1.7.1rc2
+OFI_VERSION=1.7.1
 PREFIX=$HOME/install
 
 set -e

From 1861529c80bb206e954a1d4329205d3d739d090b Mon Sep 17 00:00:00 2001
From: Phil Carns <carns@mcs.anl.gov>
Date: Wed, 15 May 2019 15:04:22 -0400
Subject: [PATCH 5/8] bug fix to header encoding for null input RPCs

- without this change, Mercury will omit the portion of the header that
  was reserved by HG_Class_set_input_offset() for RPCs with null input
  or output arguments
---
 src/mercury.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/mercury.c b/src/mercury.c
index 9bcbb6b1..2c584026 100644
--- a/src/mercury.c
+++ b/src/mercury.c
@@ -657,7 +657,7 @@ hg_set_struct(struct hg_private_handle *hg_handle,
     }
     if (!proc_cb || !struct_ptr) {
         /* Silently skip */
-        *payload_size = 0;
+        *payload_size = header_offset;
         goto done;
     }
 

From 3955b127ec13dde701df512109890070963b8093 Mon Sep 17 00:00:00 2001
From: Phil Carns <carns@mcs.anl.gov>
Date: Wed, 15 May 2019 16:57:34 -0400
Subject: [PATCH 6/8] allow NULL size argument to HG_Get_input_buf()

---
 src/mercury.c | 8 +++++---
 src/mercury.h | 2 ++
 2 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/mercury.c b/src/mercury.c
index 2c584026..4137264f 100644
--- a/src/mercury.c
+++ b/src/mercury.c
@@ -1971,7 +1971,7 @@ HG_Get_input_buf(hg_handle_t handle, void **in_buf, hg_size_t *in_buf_size)
         ret = HG_INVALID_PARAM;
         goto done;
     }
-    if (!in_buf || !in_buf_size) {
+    if (!in_buf) {
         HG_LOG_ERROR("NULL pointer");
         ret = HG_INVALID_PARAM;
         goto done;
@@ -1981,7 +1981,8 @@ HG_Get_input_buf(hg_handle_t handle, void **in_buf, hg_size_t *in_buf_size)
      * only the user payload is copied */
     if (private_handle->in_extra_buf) {
         *in_buf = private_handle->in_extra_buf;
-        *in_buf_size = private_handle->in_extra_buf_size;
+        if(in_buf_size)
+            *in_buf_size = private_handle->in_extra_buf_size;
     } else {
         void *buf;
         hg_size_t buf_size, header_offset = hg_header_get_size(HG_INPUT);
@@ -1994,7 +1995,8 @@ HG_Get_input_buf(hg_handle_t handle, void **in_buf, hg_size_t *in_buf_size)
         }
 
         *in_buf = (char *) buf + header_offset;
-        *in_buf_size = buf_size - header_offset;
+        if(in_buf_size)
+            *in_buf_size = buf_size - header_offset;
     }
 
 done:
diff --git a/src/mercury.h b/src/mercury.h
index 7abfa021..1867ec61 100644
--- a/src/mercury.h
+++ b/src/mercury.h
@@ -858,6 +858,8 @@ HG_Free_output(
  * to define the offset at which HG_Forward() / HG_Get_input() will start
  * encoding / decoding the input parameters.
  *
+ * \remark in_buf_size argument will be ignored if NULL
+ *
  * \param handle [IN]           HG handle
  * \param in_buf [OUT]          pointer to input buffer
  * \param in_buf_size [OUT]     pointer to input buffer size

From 9906f25b6f9c52079d57006f199b3ea47960c435 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Thu, 16 May 2019 13:24:12 -0500
Subject: [PATCH 7/8] HG: allow for NULL size argument to HG_Get_output_buf()

---
 src/mercury.c | 12 +++++++-----
 src/mercury.h |  2 ++
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/src/mercury.c b/src/mercury.c
index 4137264f..f4e0df65 100644
--- a/src/mercury.c
+++ b/src/mercury.c
@@ -1981,7 +1981,7 @@ HG_Get_input_buf(hg_handle_t handle, void **in_buf, hg_size_t *in_buf_size)
      * only the user payload is copied */
     if (private_handle->in_extra_buf) {
         *in_buf = private_handle->in_extra_buf;
-        if(in_buf_size)
+        if (in_buf_size)
             *in_buf_size = private_handle->in_extra_buf_size;
     } else {
         void *buf;
@@ -1995,7 +1995,7 @@ HG_Get_input_buf(hg_handle_t handle, void **in_buf, hg_size_t *in_buf_size)
         }
 
         *in_buf = (char *) buf + header_offset;
-        if(in_buf_size)
+        if (in_buf_size)
             *in_buf_size = buf_size - header_offset;
     }
 
@@ -2016,7 +2016,7 @@ HG_Get_output_buf(hg_handle_t handle, void **out_buf, hg_size_t *out_buf_size)
         ret = HG_INVALID_PARAM;
         goto done;
     }
-    if (!out_buf || !out_buf_size) {
+    if (!out_buf) {
         HG_LOG_ERROR("NULL pointer");
         ret = HG_INVALID_PARAM;
         goto done;
@@ -2026,7 +2026,8 @@ HG_Get_output_buf(hg_handle_t handle, void **out_buf, hg_size_t *out_buf_size)
      * only the user payload is copied */
     if (private_handle->out_extra_buf) {
         *out_buf = private_handle->out_extra_buf;
-        *out_buf_size = private_handle->out_extra_buf_size;
+        if (out_buf_size)
+            *out_buf_size = private_handle->out_extra_buf_size;
     } else {
         void *buf;
         hg_size_t buf_size, header_offset = hg_header_get_size(HG_OUTPUT);
@@ -2039,7 +2040,8 @@ HG_Get_output_buf(hg_handle_t handle, void **out_buf, hg_size_t *out_buf_size)
         }
 
         *out_buf = (char *) buf + header_offset;
-        *out_buf_size = buf_size - header_offset;
+        if (out_buf_size)
+            *out_buf_size = buf_size - header_offset;
     }
 
 done:
diff --git a/src/mercury.h b/src/mercury.h
index 1867ec61..a17ee1c9 100644
--- a/src/mercury.h
+++ b/src/mercury.h
@@ -884,6 +884,8 @@ HG_Get_input_buf(
  * to define the offset at which HG_Respond() / HG_Get_output() will start
  * encoding / decoding the output parameters.
  *
+ * \remark out_buf_size argument will be ignored if NULL
+ *
  * \param handle [IN]           HG handle
  * \param out_buf [OUT]         pointer to output buffer
  * \param out_buf_size [OUT]    pointer to output buffer size

From cc0807e8377e129945834d292be21a6667a8cbb3 Mon Sep 17 00:00:00 2001
From: Jerome Soumagne <jsoumagne@hdfgroup.org>
Date: Mon, 13 May 2019 15:27:03 -0500
Subject: [PATCH 8/8] NA OFI: return appropriate error code if operation cannot
 be canceled

Add NA_CANCEL_ERROR and HG_CANCEL_ERROR return codes
---
 Testing/test_cancel.c    |  2 +-
 src/mercury.h            |  2 +-
 src/mercury_core.c       | 10 +++++++---
 src/mercury_core_types.h |  1 +
 src/na/na_ofi.c          | 19 ++++++++++++++-----
 src/na/na_types.h        |  1 +
 6 files changed, 25 insertions(+), 10 deletions(-)

diff --git a/Testing/test_cancel.c b/Testing/test_cancel.c
index 433336f3..721a0770 100644
--- a/Testing/test_cancel.c
+++ b/Testing/test_cancel.c
@@ -73,7 +73,7 @@ hg_test_cancel_rpc(hg_context_t *context, hg_request_class_t *request_class,
 
     /* Cancel request */
     ret = HG_Cancel(handle);
-    if (ret != HG_SUCCESS) {
+    if (ret != HG_SUCCESS && ret != HG_CANCEL_ERROR) {
         HG_TEST_LOG_ERROR("Could not cancel call");
         goto done;
     }
diff --git a/src/mercury.h b/src/mercury.h
index a17ee1c9..97da9ca6 100644
--- a/src/mercury.h
+++ b/src/mercury.h
@@ -1010,7 +1010,7 @@ HG_Trigger(
  *
  * \param handle [IN]           HG handle
  *
- * \return HG_SUCCESS or corresponding HG error code
+ * \return HG_SUCCESS or HG_CANCEL_ERROR or corresponding HG error code
  */
 HG_EXPORT hg_return_t
 HG_Cancel(
diff --git a/src/mercury_core.c b/src/mercury_core.c
index 846a1da7..8c232a71 100644
--- a/src/mercury_core.c
+++ b/src/mercury_core.c
@@ -3540,7 +3540,9 @@ hg_core_cancel(struct hg_core_private_handle *hg_core_handle)
 
         na_ret = NA_Cancel(hg_core_handle->na_class, hg_core_handle->na_context,
             hg_core_handle->na_recv_op_id);
-        if (na_ret != NA_SUCCESS) {
+        if (na_ret == NA_CANCEL_ERROR)
+            ret = HG_CANCEL_ERROR;
+        else if (na_ret != NA_SUCCESS) {
             HG_LOG_ERROR("Could not cancel recv op id");
             ret = HG_NA_ERROR;
             goto done;
@@ -3552,7 +3554,9 @@ hg_core_cancel(struct hg_core_private_handle *hg_core_handle)
 
         na_ret = NA_Cancel(hg_core_handle->na_class, hg_core_handle->na_context,
             hg_core_handle->na_send_op_id);
-        if (na_ret != NA_SUCCESS) {
+        if (na_ret == NA_CANCEL_ERROR)
+            ret = HG_CANCEL_ERROR;
+        else if (na_ret != NA_SUCCESS) {
             HG_LOG_ERROR("Could not cancel send op id");
             ret = HG_NA_ERROR;
             goto done;
@@ -4868,7 +4872,7 @@ HG_Core_cancel(hg_core_handle_t handle)
     }
 
     ret = hg_core_cancel((struct hg_core_private_handle *) handle);
-    if (ret != HG_SUCCESS) {
+    if (ret != HG_SUCCESS && ret != HG_CANCEL_ERROR) {
         HG_LOG_ERROR("Could not cancel handle");
         goto done;
     }
diff --git a/src/mercury_core_types.h b/src/mercury_core_types.h
index 8e5d6ac3..4bec24a7 100644
--- a/src/mercury_core_types.h
+++ b/src/mercury_core_types.h
@@ -42,6 +42,7 @@ typedef enum hg_return {
     HG_NO_MATCH,        /*!< no function match */
     HG_CHECKSUM_ERROR,  /*!< checksum error */
     HG_CANCELED,        /*!< operation was canceled */
+    HG_CANCEL_ERROR,    /*!< operation could not be canceled */
     HG_OTHER_ERROR      /*!< error from mercury_util or external to mercury */
 } hg_return_t;
 
diff --git a/src/na/na_ofi.c b/src/na/na_ofi.c
index 77015c69..00c6a40e 100644
--- a/src/na/na_ofi.c
+++ b/src/na/na_ofi.c
@@ -4819,9 +4819,12 @@ na_ofi_cancel(na_class_t *na_class, na_context_t *context,
     case NA_CB_RECV_UNEXPECTED:
         rc = fi_cancel(&NA_OFI_CONTEXT(context)->noc_rx->fid,
             &na_ofi_op_id->noo_fi_ctx);
-        if (rc != 0)
+        if (rc != 0) {
             NA_LOG_ERROR("fi_cancel unexpected recv failed, rc: %d(%s).",
                          rc, fi_strerror((int) -rc));
+            ret = NA_CANCEL_ERROR;
+            goto out;
+        }
 
         tmp = first = na_ofi_msg_unexpected_op_pop(context);
         do {
@@ -4848,9 +4851,12 @@ na_ofi_cancel(na_class_t *na_class, na_context_t *context,
     case NA_CB_RECV_EXPECTED:
         rc = fi_cancel(&NA_OFI_CONTEXT(context)->noc_rx->fid,
             &na_ofi_op_id->noo_fi_ctx);
-        if (rc != 0)
+        if (rc != 0) {
             NA_LOG_ERROR("fi_cancel expected recv failed, rc: %d(%s).",
                          rc, fi_strerror((int) -rc));
+            ret = NA_CANCEL_ERROR;
+            goto out;
+        }
 
         ret = na_ofi_complete(na_ofi_op_id, NA_CANCELED);
         break;
@@ -4864,7 +4870,8 @@ na_ofi_cancel(na_class_t *na_class, na_context_t *context,
         if (rc == 0) {
             /* Complete only if successfully canceled */
             ret = na_ofi_complete(na_ofi_op_id, NA_CANCELED);
-        }
+        } else
+            ret = NA_CANCEL_ERROR;
         break;
     default:
         break;
@@ -4873,12 +4880,14 @@ na_ofi_cancel(na_class_t *na_class, na_context_t *context,
     /* Work around segfault on fi_cq_signal() in some providers */
     if (!(na_ofi_prov_flags[NA_OFI_CLASS(na_class)->nop_domain->nod_prov_type]
         & NA_OFI_SKIP_SIGNAL)) {
-        /* signal the cq to make the wait FD can work */
+        /* Signal CQ to wake up and no longer wait on FD */
         rc = fi_cq_signal(NA_OFI_CONTEXT(context)->noc_cq);
-        if (rc != 0 && rc != -ENOSYS)
+        if (rc != 0 && rc != -ENOSYS) {
             NA_LOG_ERROR("fi_cq_signal (op type %d) failed, rc: %d(%s).",
                 na_ofi_op_id->noo_completion_data.callback_info.type, rc,
                 fi_strerror((int) -rc));
+            ret = NA_PROTOCOL_ERROR;
+        }
     }
 
 out:
diff --git a/src/na/na_types.h b/src/na/na_types.h
index 62cfff87..fd18929a 100644
--- a/src/na/na_types.h
+++ b/src/na/na_types.h
@@ -60,6 +60,7 @@ typedef enum na_return {
     NA_NOMEM_ERROR,         /*!< no memory error */
     NA_PROTOCOL_ERROR,      /*!< unknown error reported from the protocol layer */
     NA_CANCELED,            /*!< operation was canceled */
+    NA_CANCEL_ERROR,        /*!< operation could not be canceled */
     NA_ADDRINUSE_ERROR      /*!< address already in use */
 } na_return_t;
 
